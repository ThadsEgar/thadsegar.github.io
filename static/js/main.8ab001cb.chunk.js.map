{"version":3,"sources":["Header.js","Footer.js","Youtube.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["MyHeader","react_default","a","createElement","lib","transparent","className","href","React","Component","Footer","Example","event","target","mute","playVideo","YouTube","videoId","opts","playerVars","autoplay","controls","rel","showinfo","loop","iv_load_policy","end","onReady","this","_onReady","onEnd","_onEnd","App","src_Header","src_Youtube","src_Footer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4NAwBeA,0LAhBX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQC,aAAW,EAACC,UAAU,UAC5BL,EAAAC,EAAAC,cAACC,EAAA,WAAD,CAAYE,UAAU,YACpBL,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,mDAAR,YACAN,EAAAC,EAAAC,cAAA,KAAGI,KAAK,uCAAR,UACAN,EAAAC,EAAAC,cAAA,+BAVWK,IAAMC,YCUdC,0LAXX,OACET,EAAAC,EAAAC,cAAA,UAAQG,UAAU,oBAChBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,qBACbL,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,8DANWK,IAAMC,oBC0CZE,2LAxCJC,GACPA,EAAMC,OAAOC,sCAGRF,GACLA,EAAMC,OAAOE,6CAgBb,OACEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oBACbL,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAEEC,QAAQ,cACRC,KAlBW,CACrBC,WAAY,CACVC,SAAU,EACVC,SAAU,EACVC,IAAK,EACLC,SAAU,EACVC,KAAM,EACNC,eAAgB,EAChBC,IAAK,KAWGpB,UAAU,eACVqB,QAASC,KAAKC,SACdC,MAAOF,KAAKG,kBA/BJvB,IAAMC,YCuBbuB,mLAZX,OACE/B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACbL,EAAAC,EAAAC,cAAC8B,EAAD,MACAhC,EAAAC,EAAAC,cAAC+B,EAAD,MACAjC,EAAAC,EAAAC,cAACgC,EAAD,eAPQ1B,aCDE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.8ab001cb.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Layout, Header, Navigation, Drawer, Content} from 'react-mdl';\r\nimport {Link} from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nclass MyHeader extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header transparent className=\"Header\">\r\n          <Navigation className=\"NavNames\">\r\n            <a>Home</a>\r\n            <a>About</a>\r\n            <a href=\"https://www.linkedin.com/in/thads-michael-egar/\">LinkedIn</a>\r\n            <a href=\"https://github.com/ThadsMichaelEgar\">GitHub</a>\r\n            <a>Projects</a>\r\n          </Navigation>\r\n        </Header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyHeader;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component{\r\n  render(){\r\n    return(\r\n      <footer className=\"footer-container\">\r\n        <div className=\"footer-container2\">\r\n          <p>Â©Copyright 2018 Thads Michael Egar.</p>\r\n          <p>All rights reserved. Powered by react.js</p>\r\n          </div>\r\n      </footer>\r\n    )\r\n  };\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport YouTube from 'react-youtube';\r\nimport './Youtube.css';\r\n\r\nclass Example extends React.Component {\r\n  _onReady(event) {\r\n    event.target.mute();\r\n  }\r\n\r\n  _onEnd(event) {\r\n    event.target.playVideo();\r\n  }\r\n\r\n  render() {\r\n    const videoOptions = {\r\n    playerVars: { // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n      controls: 0,\r\n      rel: 0,\r\n      showinfo: 0,\r\n      loop: 1,\r\n      iv_load_policy: 3,\r\n      end: 45\r\n    }\r\n  };\r\n\r\n    return (\r\n      <div className=\"video-background\">\r\n          <div className=\"video-foreground\">\r\n            <YouTube\r\n              //videoId=\"hzMnBcJwPXY\"\r\n              videoId=\"tbmystQnI9A\"\r\n              opts={videoOptions}\r\n              className=\"video-iframe\"\r\n              onReady={this._onReady}\r\n              onEnd={this._onEnd}\r\n            />\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default Example;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//components\nimport Header from './Header';\nimport Footer from './Footer';\nimport Youtube from './Youtube';\n\n//other\nimport YouTube from 'react-youtube';\nimport {Layout, Navigation, Drawer, Content} from 'react-mdl';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Content\">\n          <Header />\n          <Youtube />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}